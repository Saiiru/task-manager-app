pipeline {
    agent any

    environment {
        DATABASE_URL = credentials('DATABASE_URL')
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        GITHUB_TOKEN = credentials('github-token')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    if (env.BRANCH_NAME == 'dev') {
                        git branch: 'dev', url: 'https://github.com/saiiru/task-manager-app.git', credentialsId: 'github-token'
                    } else {
                        git branch: 'main', url: 'https://github.com/saiiru/task-manager-app.git', credentialsId: 'github-token'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker buildx create --use'
                    sh 'docker buildx build -t sairu/task-manager-backend:latest .'
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    docker.image('sairu/task-manager-backend:latest').inside {
                        sh 'go test ./...'
                    }
                }
            }
        }

        stage('Push Docker Image') {
            when {
                branch 'dev'
            }
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS) {
                        sh 'docker buildx build -t saiiru/task-manager-backend:dev --push .'
                    }
                }
            }
        }

        stage('Deploy to Dev Kubernetes') {
            when {
                branch 'dev'
            }
            steps {
                script {
                    kubectl.apply('-f ci-cd/kubernetes/secret.yaml')
                    kubectl.apply('-f ci-cd/kubernetes/deployment.yaml')
                    kubectl.apply('-f ci-cd/kubernetes/service.yaml')
                }
            }
        }

        stage('Promote to Prod') {
            when {
                branch 'main'
            }
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS) {
                        sh 'docker buildx build -t sairu/task-manager-backend:latest --push .'
                    }
                    kubectl.apply('-f ci-cd/kubernetes/secret.yaml')
                    kubectl.apply('-f ci-cd/kubernetes/deployment.yaml')
                    kubectl.apply('-f ci-cd/kubernetes/service.yaml')
                }
            }
        }
    }
}